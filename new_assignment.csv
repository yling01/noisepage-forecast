query_template,cluster
BEGIN,0
COMMIT,0
DELETE FROM new_order WHERE NO_O_ID = $1 AND NO_D_ID = $2 AND NO_W_ID = $3,0
"INSERT INTO history (H_C_D_ID, H_C_W_ID, H_C_ID, H_D_ID, H_W_ID, H_DATE, H_AMOUNT, H_DATA) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)",0
"INSERT INTO new_order (NO_O_ID, NO_D_ID, NO_W_ID) VALUES ( $1, $2, $3)",0
"INSERT INTO oorder (O_ID, O_D_ID, O_W_ID, O_C_ID, O_ENTRY_D, O_OL_CNT, O_ALL_LOCAL) VALUES ($1, $2, $3, $4, $5, $6, $7)",0
"INSERT INTO order_line (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)",0
ROLLBACK,1
"SELECT * FROM (SELECT n.nspname,c.relname,a.attname,a.atttypid,a.attnotnull OR (t.typtype = $1 AND t.typnotnull) AS attnotnull,a.atttypmod,a.attlen,t.typtypmod,row_number() OVER (PARTITION BY a.attrelid ORDER BY a.attnum) AS attnum, nullif(a.attidentity, $2) as attidentity,nullif(a.attgenerated, $3) as attgenerated,pg_catalog.pg_get_expr(def.adbin, def.adrelid) AS adsrc,dsc.description,t.typbasetype,t.typtype FROM pg_catalog.pg_namespace n JOIN pg_catalog.pg_class c ON (c.relnamespace = n.oid) JOIN pg_catalog.pg_attribute a ON (a.attrelid=c.oid) JOIN pg_catalog.pg_type t ON (a.atttypid = t.oid) LEFT JOIN pg_catalog.pg_attrdef def ON (a.attrelid=def.adrelid AND a.attnum = def.adnum) LEFT JOIN pg_catalog.pg_description dsc ON (c.oid=dsc.objoid AND a.attnum = dsc.objsubid) LEFT JOIN pg_catalog.pg_class dc ON (dc.oid=dsc.classoid AND dc.relname=$4) LEFT JOIN pg_catalog.pg_namespace dn ON (dc.relnamespace=dn.oid AND dn.nspname=$5) WHERE c.relkind in ($6,$7,$8,$9,$10) and a.attnum > $11 AND NOT a.attisdropped AND n.nspname LIKE $12 AND c.relname LIKE $13) c WHERE true ORDER BY nspname,c.relname,attnum",2
SELECT * FROM pg_stat_archiver,3
SELECT * FROM pg_stat_bgwriter,3
SELECT * FROM pg_stat_database,3
SELECT * FROM pg_stat_database_conflicts,3
SELECT * FROM pg_stat_user_indexes,3
SELECT * FROM pg_stat_user_tables,3
SELECT * FROM pg_statio_user_indexes,3
SELECT * FROM pg_statio_user_tables,3
"SELECT COUNT(DISTINCT (S_I_ID)) AS STOCK_COUNT FROM order_line, stock WHERE OL_W_ID = $1 AND OL_D_ID = $2 AND OL_O_ID < $3 AND OL_O_ID >= $4 AND S_W_ID = $5 AND S_I_ID = OL_I_ID AND S_QUANTITY < $6",0
SELECT C_DATA FROM customer WHERE C_W_ID = $1 AND C_D_ID = $2 AND C_ID = $3,0
"SELECT C_DISCOUNT, C_LAST, C_CREDIT FROM customer WHERE C_W_ID = $1 AND C_D_ID = $2 AND C_ID = $3",0
"SELECT C_FIRST, C_MIDDLE, C_ID, C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, C_PHONE, C_CREDIT, C_CREDIT_LIM, C_DISCOUNT, C_BALANCE, C_YTD_PAYMENT, C_PAYMENT_CNT, C_SINCE FROM customer WHERE C_W_ID = $1 AND C_D_ID = $2 AND C_LAST = $3 ORDER BY C_FIRST",0
"SELECT C_FIRST, C_MIDDLE, C_LAST, C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, C_PHONE, C_CREDIT, C_CREDIT_LIM, C_DISCOUNT, C_BALANCE, C_YTD_PAYMENT, C_PAYMENT_CNT, C_SINCE FROM customer WHERE C_W_ID = $1 AND C_D_ID = $2 AND C_ID = $3",0
SELECT D_NEXT_O_ID FROM district WHERE D_W_ID = $1 AND D_ID = $2,0
"SELECT D_NEXT_O_ID, D_TAX FROM district WHERE D_W_ID = $1 AND D_ID = $2 FOR UPDATE",0
"SELECT D_STREET_1, D_STREET_2, D_CITY, D_STATE, D_ZIP, D_NAME FROM district WHERE D_W_ID = $1 AND D_ID = $2",0
"SELECT I_PRICE, I_NAME , I_DATA FROM item WHERE I_ID = $1",0
"SELECT I_PRICE, I_NAME , I_DATA FROM item WHERE I_ID = -$1",1
SELECT NO_O_ID FROM new_order WHERE NO_D_ID = $1 AND NO_W_ID = $2 ORDER BY NO_O_ID ASC LIMIT $3,0
"SELECT NULL AS TABLE_CAT, n.nspname AS TABLE_SCHEM, c.relname AS TABLE_NAME, CASE n.nspname ~ $1 OR n.nspname = $2 WHEN true THEN CASE WHEN n.nspname = $3 OR n.nspname = $4 THEN CASE c.relkind WHEN $5 THEN $6 WHEN $7 THEN $8 WHEN $9 THEN $10 ELSE NULL END WHEN n.nspname = $11 THEN CASE c.relkind WHEN $12 THEN $13 WHEN $14 THEN $15 ELSE NULL END ELSE CASE c.relkind WHEN $16 THEN $17 WHEN $18 THEN $19 WHEN $20 THEN $21 WHEN $22 THEN $23 WHEN $24 THEN $25 ELSE NULL END END WHEN false THEN CASE c.relkind WHEN $26 THEN $27 WHEN $28 THEN $29 WHEN $30 THEN $31 WHEN $32 then $33 WHEN $34 THEN $35 WHEN $36 THEN $37 WHEN $38 THEN $39 WHEN $40 THEN $41 WHEN $42 THEN $43 ELSE NULL END ELSE NULL END AS TABLE_TYPE, d.description AS REMARKS, $44 as TYPE_CAT, $45 as TYPE_SCHEM, $46 as TYPE_NAME, $47 AS SELF_REFERENCING_COL_NAME, $48 AS REF_GENERATION FROM pg_catalog.pg_namespace n, pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_description d ON (c.oid = d.objoid AND d.objsubid = $49 and d.classoid = $50::regclass) WHERE c.relnamespace = n.oid AND n.nspname LIKE $51 AND (false OR ( c.relkind = $52 AND n.nspname !~ $53 AND n.nspname <> $54 ) ) ORDER BY TABLE_TYPE,TABLE_SCHEM,TABLE_NAME",2
"SELECT NULL::text AS PKTABLE_CAT, pkn.nspname AS PKTABLE_SCHEM, pkc.relname AS PKTABLE_NAME, pka.attname AS PKCOLUMN_NAME, NULL::text AS FKTABLE_CAT, fkn.nspname AS FKTABLE_SCHEM, fkc.relname AS FKTABLE_NAME, fka.attname AS FKCOLUMN_NAME, pos.n AS KEY_SEQ, CASE con.confupdtype WHEN $1 THEN $2 WHEN $3 THEN $4 WHEN $5 THEN $6 WHEN $7 THEN $8 WHEN $9 THEN $10 WHEN $11 THEN $12 ELSE NULL END AS UPDATE_RULE, CASE con.confdeltype WHEN $13 THEN $14 WHEN $15 THEN $16 WHEN $17 THEN $18 WHEN $19 THEN $20 WHEN $21 THEN $22 WHEN $23 THEN $24 ELSE NULL END AS DELETE_RULE, con.conname AS FK_NAME, pkic.relname AS PK_NAME, CASE WHEN con.condeferrable AND con.condeferred THEN $25 WHEN con.condeferrable THEN $26 ELSE $27 END AS DEFERRABILITY FROM pg_catalog.pg_namespace pkn, pg_catalog.pg_class pkc, pg_catalog.pg_attribute pka, pg_catalog.pg_namespace fkn, pg_catalog.pg_class fkc, pg_catalog.pg_attribute fka, pg_catalog.pg_constraint con, pg_catalog.generate_series($28, $29) pos(n), pg_catalog.pg_class pkic WHERE pkn.oid = pkc.relnamespace AND pkc.oid = pka.attrelid AND pka.attnum = con.confkey[pos.n] AND con.confrelid = pkc.oid AND fkn.oid = fkc.relnamespace AND fkc.oid = fka.attrelid AND fka.attnum = con.conkey[pos.n] AND con.conrelid = fkc.oid AND con.contype = $30 AND (pkic.relkind = $31 OR pkic.relkind = $32) AND pkic.oid = con.conindid AND fkn.nspname = $33 AND fkc.relname = $34 ORDER BY pkn.nspname,pkc.relname, con.conname,pos.n",2
"SELECT OL_I_ID, OL_SUPPLY_W_ID, OL_QUANTITY, OL_AMOUNT, OL_DELIVERY_D FROM order_line WHERE OL_O_ID = $1 AND OL_D_ID = $2 AND OL_W_ID = $3",0
SELECT O_C_ID FROM oorder WHERE O_ID = $1 AND O_D_ID = $2 AND O_W_ID = $3,0
"SELECT O_ID, O_CARRIER_ID, O_ENTRY_D FROM oorder WHERE O_W_ID = $1 AND O_D_ID = $2 AND O_C_ID = $3 ORDER BY O_ID DESC LIMIT $4",0
SELECT SUM(OL_AMOUNT) AS OL_TOTAL FROM order_line WHERE OL_O_ID = $1 AND OL_D_ID = $2 AND OL_W_ID = $3,0
"SELECT S_QUANTITY, S_DATA, S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10 FROM stock WHERE S_I_ID = $1 AND S_W_ID = $2 FOR UPDATE",0
"SELECT W_STREET_1, W_STREET_2, W_CITY, W_STATE, W_ZIP, W_NAME FROM warehouse WHERE W_ID = $1",0
SELECT W_TAX FROM warehouse WHERE W_ID = $1,0
SELECT setting FROM pg_catalog.pg_settings WHERE name=$1,2
"SELECT tmp.TABLE_CAT, tmp.TABLE_SCHEM, tmp.TABLE_NAME, tmp.NON_UNIQUE, tmp.INDEX_QUALIFIER, tmp.INDEX_NAME, tmp.TYPE, tmp.ORDINAL_POSITION, trim(both $1 from pg_catalog.pg_get_indexdef(tmp.CI_OID, tmp.ORDINAL_POSITION, false)) AS COLUMN_NAME, CASE tmp.AM_NAME WHEN $2 THEN CASE tmp.I_INDOPTION[tmp.ORDINAL_POSITION - $3] & $4::smallint WHEN $5 THEN $6 ELSE $7 END ELSE NULL END AS ASC_OR_DESC, tmp.CARDINALITY, tmp.PAGES, tmp.FILTER_CONDITION FROM (SELECT NULL AS TABLE_CAT, n.nspname AS TABLE_SCHEM, ct.relname AS TABLE_NAME, NOT i.indisunique AS NON_UNIQUE, NULL AS INDEX_QUALIFIER, ci.relname AS INDEX_NAME, CASE i.indisclustered WHEN true THEN $8 ELSE CASE am.amname WHEN $9 THEN $10 ELSE $11 END END AS TYPE, (information_schema._pg_expandarray(i.indkey)).n AS ORDINAL_POSITION, ci.reltuples AS CARDINALITY, ci.relpages AS PAGES, pg_catalog.pg_get_expr(i.indpred, i.indrelid) AS FILTER_CONDITION, ci.oid AS CI_OID, i.indoption AS I_INDOPTION, am.amname AS AM_NAME FROM pg_catalog.pg_class ct JOIN pg_catalog.pg_namespace n ON (ct.relnamespace = n.oid) JOIN pg_catalog.pg_index i ON (ct.oid = i.indrelid) JOIN pg_catalog.pg_class ci ON (ci.oid = i.indexrelid) JOIN pg_catalog.pg_am am ON (ci.relam = am.oid) WHERE true AND n.nspname = $12 AND ct.relname = $13) AS tmp ORDER BY NON_UNIQUE, TYPE, INDEX_NAME, ORDINAL_POSITION",2
SELECT version(),3
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL SERIALIZABLE,2
SET application_name = $1,2
SET extra_float_digits = $1,2
SHOW ALL,3
"UPDATE customer SET C_BALANCE = $1, C_YTD_PAYMENT = $2, C_PAYMENT_CNT = $3 WHERE C_W_ID = $4 AND C_D_ID = $5 AND C_ID = $6",4
"UPDATE customer SET C_BALANCE = $1, C_YTD_PAYMENT = $2, C_PAYMENT_CNT = $3, C_DATA = $4 WHERE C_W_ID = $5 AND C_D_ID = $6 AND C_ID = $7",5
"UPDATE customer SET C_BALANCE = -$1, C_YTD_PAYMENT = $2, C_PAYMENT_CNT = $3 WHERE C_W_ID = $4 AND C_D_ID = $5 AND C_ID = $6",0
"UPDATE customer SET C_BALANCE = -$1, C_YTD_PAYMENT = $2, C_PAYMENT_CNT = $3, C_DATA = $4 WHERE C_W_ID = $5 AND C_D_ID = $6 AND C_ID = $7",0
"UPDATE customer SET C_BALANCE = C_BALANCE + $1, C_DELIVERY_CNT = C_DELIVERY_CNT + $2 WHERE C_W_ID = $3 AND C_D_ID = $4 AND C_ID = $5",0
UPDATE district SET D_NEXT_O_ID = D_NEXT_O_ID + $1 WHERE D_W_ID = $2 AND D_ID = $3,0
UPDATE district SET D_YTD = D_YTD + $1 WHERE D_W_ID = $2 AND D_ID = $3,0
UPDATE oorder SET O_CARRIER_ID = $1 WHERE O_ID = $2 AND O_D_ID = $3 AND O_W_ID = $4,0
UPDATE order_line SET OL_DELIVERY_D = $1 WHERE OL_O_ID = $2 AND OL_D_ID = $3 AND OL_W_ID = $4,0
"UPDATE stock SET S_QUANTITY = $1 , S_YTD = S_YTD + $2, S_ORDER_CNT = S_ORDER_CNT + $3, S_REMOTE_CNT = S_REMOTE_CNT + $4 WHERE S_I_ID = $5 AND S_W_ID = $6",0
UPDATE warehouse SET W_YTD = W_YTD + $1 WHERE W_ID = $2,0
select current_schema(),2
